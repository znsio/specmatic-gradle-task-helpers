import com.github.jk1.license.LicenseReportExtension
import com.github.jk1.license.LicenseReportPlugin
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.filter.SpdxLicenseBundleNormalizer
import com.github.jk1.license.render.SimpleHtmlReportRenderer
import com.github.jk1.license.render.InventoryHtmlReportRenderer
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper


buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.jk1:gradle-license-report:2.9' // gradle license plugin
    }
}

tasks.register('prettyPrintLicenseCheckFailures') {
    doFirst {
        def depsWithoutAllowedLicensesReportFile = file("${project.layout.buildDirectory.get().asFile}/reports/dependency-license/dependencies-without-allowed-license.json")
        if (depsWithoutAllowedLicensesReportFile.exists()) {
            depsWithoutAllowedLicensesReportFile.withInputStream { inputStream ->
                def json = new JsonSlurper().parse(inputStream)

                def unsupportedLicenses = json['dependenciesWithoutAllowedLicenses']

                if (unsupportedLicenses.size() > 0) {
                    def unsupportedLicensesGroupedByLicense = json.dependenciesWithoutAllowedLicenses.groupBy { it.moduleLicense }

                    unsupportedLicensesGroupedByLicense.each { license, modules ->
                        println "License: ${license}"
                        modules.each { module -> println "   - ${module.moduleName} (${module.moduleVersion})"
                        }
                        println ""
                    }
                }
            }
        }
    }
}


class SpecmaticLicenseCheckPlugin implements Plugin<Project> {
    static private ArrayList<String> allowedLicenses = ['0BSD',
                                                        'Apache-2.0',
                                                        'BSD-2-Clause',
                                                        'BSD-3-Clause',
                                                        'CC0-1.0',
                                                        'CDDL-1.0',
                                                        'CDDL-1.1',
                                                        'EDL-1.0',
                                                        'EPL-1.0',
                                                        'EPL-2.0',
                                                        'MIT',
                                                        'MPL-2.0',
                                                        'Public-Domain',]


    void apply(Project project) {
        project.plugins.apply("java")
        project.plugins.apply(LicenseReportPlugin)

        project.afterEvaluate {
            LicenseReportExtension extension = project.extensions.findByType(LicenseReportExtension)
            def buildDir = project.layout.buildDirectory.get().asFile
            if (!buildDir.exists()) {
                buildDir.mkdirs()
            }
            extension.filters = [new LicenseBundleNormalizer(createDefaultNormalizedLicensesFile(project).toString(), true), new SpdxLicenseBundleNormalizer()]
            extension.renderers = [new SimpleHtmlReportRenderer("index.html"), new InventoryHtmlReportRenderer("inventory.html")]

            extension.allowedLicensesFile = createDefaultAllowedLicensesFile(project)

            project.tasks.named('jar') {
                finalizedBy project.tasks.named('checkLicense')
            }

            project.tasks.named('generateLicenseReport') {
                outputs.upToDateWhen { false }
            }

            project.tasks.register('createAllowedLicensesFile') {
                doLast {
                    createDefaultAllowedLicensesFile(project)
                    createDefaultNormalizedLicensesFile(project)
                }
            }

            project.tasks.named('checkLicense') {
                outputs.upToDateWhen { false }
                it.dependsOn('createAllowedLicensesFile')
                finalizedBy project.tasks.named('prettyPrintLicenseCheckFailures')
            }
        }
    }


    // Returns a file with the default allowed licenses. Structure is as follows:
    // {
    //     "allowedLicenses": [
    //         {
    //             "moduleLicense": "MIT",
    //             "moduleName": ".*"
    //         },
    //         {
    //             "moduleLicense": "Apache-2.0",
    //             "moduleName": ".*"
    //         },
    //         ...
    //     ]
    // }
    private static File createDefaultAllowedLicensesFile(Project project) {
        def allowedLicensesFile = new File(project.layout.buildDirectory.get().asFile, 'allowed-licenses.json')
        def allowedLicensesDocument = allowedLicenses.collect({ eachLicense ->
            [moduleLicense: eachLicense,
             moduleName   : '.*']
        })

        allowedLicensesFile.text = new JsonBuilder([allowedLicenses: allowedLicensesDocument]).toPrettyString()
        return allowedLicensesFile
    }


    private static File createDefaultNormalizedLicensesFile(Project project) {
        def allowedLicensesFile = new File(project.layout.buildDirectory.get().asFile, 'license-normalization.json')

        allowedLicensesFile.text = new JsonBuilder([
                transformationRules: [
                        [
                                "bundleName"       : "BSD-3-Clause",
                                // normalize `Go License` with this url, to imply a BSD-3-Clause, becuase that's what the license is at this URL
                                "licenseUrlPattern": "https://golang.org/LICENSE"
                        ],
                ]
        ]).toPrettyString()
        return allowedLicensesFile
    }

}

apply plugin: SpecmaticLicenseCheckPlugin.class
